


object BankOCR {

  // read in a text block containing lcd-like numerals and print out the
  // the numbers they represent, e.g., 

  import scalaz._
  import Scalaz._

  //123 123 123 123 123 123 123 123 123
  val numerals = """
  |      _   _       _   _   _   _   _
  |   |  _|  _| |_| |_  |_    | |_| |_|
  |   | |_   _|   |  _| |_|   | |_|  _|
  """.trim.stripMargin
  
  def transpose(aas: List[List[Char]]) : List[List[Char]] = {
    // println("transpose=\n" + aas.mkString("\n", "\n", "") + "\n===")
    aas match {
      case Nil              => Nil
      case Nil :: xss       => transpose(xss)
      case (x::xs) :: Nil   => (x :: Nil) :: transpose (xs :: Nil)
      case (x::xs) :: xss   => (x :: (xss map (_.head))) :: transpose (xs :: (xss map (_.tail)))
    }
  }

  def csv = (s:String) => (s.split(",") map (_.trim)).toList
  def wsv = (s:String) => (s.split(" ") map (_.trim)).toList

  def test_transpose() {
    val m = csv("abc,123,789") map (_.toList)
    val r = csv("a17,b28,c39") map (_.toList)
    val mp = transpose(m)
    assert(mp == r)
  }
  // test_transpose()

  def lines = (s:String) => s.lines.toList

  def grouped[A](n:Int)(ls:List[List[A]]): List[List[List[A]]] = 
    ls.grouped(n).toList

  // break up those numerals into 3x3 grids
  def numeralMap(numerals: String): List[String] = {
    // lines 
    // transpose
    // grouped(4)
    // map tail
    // transpose
    // join
    // zipWith (0 to 9)
    // toMap

    // def chunks = (s:String => s.lines) andThen transpose andThen chunk(4) andThen tail
    // def reglue = transpose andThen mkString("\n")
    // (chunks andThen reglue)(str)
    
    def toSeqss = (s:String) => s.lines.toList map (_.toList)
    def join = (ss:List[Char]) => ss.foldLeft("")((a,s) => a+s)

    jjk
    val r = ((toSeqss andThen transpose andThen (grouped(4)(_))) map 
             (_.tail) map 
             (transpose(_)) map 
             (join(_))(numerals))

    r.map(join(_))
  }


  // later variations - try to correct for noisy input
  // ...and number that have arbitrary spacing, e.g., 
  val test2 = """
      _     _     _  _ _  _ 
  |   _||_| _|   |_ |_  ||_|
  |  |_   | _|    _||_| ||_|
  """

  

}


  // transpose(List(t)) map (List(h) ++ _)

object BankOCRApp extends App {
  import BankOCR._

  override def main(args: Array[String]) = {
    println("\n" + numeralMap(numerals))
  }
}
